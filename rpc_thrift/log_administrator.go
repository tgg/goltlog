// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc_thrift

import (
	"fmt"
	"git-wip-us.apache.org/repos/asf/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

type LogAdministrator interface {
	LogStatus

	// Parameters:
	//  - Size
	SetMaxSize(size U64) (ouch *InvalidParam, err error)
	// Parameters:
	//  - Action
	SetLogFullAction(action LogFullAction) (err error)
	// Parameters:
	//  - State
	SetAdministrativeState(state AdministrativeState) (err error)
	ClearLog() (err error)
	Destroy() (err error)
}

type LogAdministratorClient struct {
	*LogStatusClient
}

func NewLogAdministratorClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LogAdministratorClient {
	return &LogAdministratorClient{LogStatusClient: NewLogStatusClientFactory(t, f)}
}

func NewLogAdministratorClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LogAdministratorClient {
	return &LogAdministratorClient{LogStatusClient: NewLogStatusClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Size
func (p *LogAdministratorClient) SetMaxSize(size U64) (ouch *InvalidParam, err error) {
	if err = p.sendSetMaxSize(size); err != nil {
		return
	}
	return p.recvSetMaxSize()
}

func (p *LogAdministratorClient) sendSetMaxSize(size U64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("set_max_size", thrift.CALL, p.SeqId)
	args31 := NewSetMaxSizeArgs()
	args31.Size = size
	err = args31.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *LogAdministratorClient) recvSetMaxSize() (ouch *InvalidParam, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result32 := NewSetMaxSizeResult()
	err = result32.Read(iprot)
	iprot.ReadMessageEnd()
	if result32.Ouch != nil {
		ouch = result32.Ouch
	}
	return
}

// Parameters:
//  - Action
func (p *LogAdministratorClient) SetLogFullAction(action LogFullAction) (err error) {
	if err = p.sendSetLogFullAction(action); err != nil {
		return
	}
	return p.recvSetLogFullAction()
}

func (p *LogAdministratorClient) sendSetLogFullAction(action LogFullAction) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("set_log_full_action", thrift.CALL, p.SeqId)
	args35 := NewSetLogFullActionArgs()
	args35.Action = action
	err = args35.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *LogAdministratorClient) recvSetLogFullAction() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result36 := NewSetLogFullActionResult()
	err = result36.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - State
func (p *LogAdministratorClient) SetAdministrativeState(state AdministrativeState) (err error) {
	if err = p.sendSetAdministrativeState(state); err != nil {
		return
	}
	return p.recvSetAdministrativeState()
}

func (p *LogAdministratorClient) sendSetAdministrativeState(state AdministrativeState) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("set_administrative_state", thrift.CALL, p.SeqId)
	args39 := NewSetAdministrativeStateArgs()
	args39.State = state
	err = args39.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *LogAdministratorClient) recvSetAdministrativeState() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result40 := NewSetAdministrativeStateResult()
	err = result40.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

func (p *LogAdministratorClient) ClearLog() (err error) {
	if err = p.sendClearLog(); err != nil {
		return
	}
	return p.recvClearLog()
}

func (p *LogAdministratorClient) sendClearLog() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("clear_log", thrift.CALL, p.SeqId)
	args43 := NewClearLogArgs()
	err = args43.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *LogAdministratorClient) recvClearLog() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error46 error
		error46, err = error45.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error46
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result44 := NewClearLogResult()
	err = result44.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

func (p *LogAdministratorClient) Destroy() (err error) {
	if err = p.sendDestroy(); err != nil {
		return
	}
	return p.recvDestroy()
}

func (p *LogAdministratorClient) sendDestroy() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("destroy", thrift.CALL, p.SeqId)
	args47 := NewDestroyArgs()
	err = args47.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *LogAdministratorClient) recvDestroy() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error50 error
		error50, err = error49.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error50
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result48 := NewDestroyResult()
	err = result48.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

type LogAdministratorProcessor struct {
	*LogStatusProcessor
}

func NewLogAdministratorProcessor(handler LogAdministrator) *LogAdministratorProcessor {
	self51 := &LogAdministratorProcessor{NewLogStatusProcessor(handler)}
	self51.AddToProcessorMap("set_max_size", &logAdministratorProcessorSetMaxSize{handler: handler})
	self51.AddToProcessorMap("set_log_full_action", &logAdministratorProcessorSetLogFullAction{handler: handler})
	self51.AddToProcessorMap("set_administrative_state", &logAdministratorProcessorSetAdministrativeState{handler: handler})
	self51.AddToProcessorMap("clear_log", &logAdministratorProcessorClearLog{handler: handler})
	self51.AddToProcessorMap("destroy", &logAdministratorProcessorDestroy{handler: handler})
	return self51
}

type logAdministratorProcessorSetMaxSize struct {
	handler LogAdministrator
}

func (p *logAdministratorProcessorSetMaxSize) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetMaxSizeArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_max_size", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetMaxSizeResult()
	if result.Ouch, err = p.handler.SetMaxSize(args.Size); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_max_size: "+err.Error())
		oprot.WriteMessageBegin("set_max_size", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("set_max_size", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type logAdministratorProcessorSetLogFullAction struct {
	handler LogAdministrator
}

func (p *logAdministratorProcessorSetLogFullAction) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetLogFullActionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_log_full_action", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetLogFullActionResult()
	if err = p.handler.SetLogFullAction(args.Action); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_log_full_action: "+err.Error())
		oprot.WriteMessageBegin("set_log_full_action", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("set_log_full_action", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type logAdministratorProcessorSetAdministrativeState struct {
	handler LogAdministrator
}

func (p *logAdministratorProcessorSetAdministrativeState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetAdministrativeStateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("set_administrative_state", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetAdministrativeStateResult()
	if err = p.handler.SetAdministrativeState(args.State); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_administrative_state: "+err.Error())
		oprot.WriteMessageBegin("set_administrative_state", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("set_administrative_state", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type logAdministratorProcessorClearLog struct {
	handler LogAdministrator
}

func (p *logAdministratorProcessorClearLog) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewClearLogArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clear_log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewClearLogResult()
	if err = p.handler.ClearLog(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_log: "+err.Error())
		oprot.WriteMessageBegin("clear_log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("clear_log", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type logAdministratorProcessorDestroy struct {
	handler LogAdministrator
}

func (p *logAdministratorProcessorDestroy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDestroyArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("destroy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDestroyResult()
	if err = p.handler.Destroy(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing destroy: "+err.Error())
		oprot.WriteMessageBegin("destroy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("destroy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type SetMaxSizeArgs struct {
	Size U64 `thrift:"size,1"`
}

func NewSetMaxSizeArgs() *SetMaxSizeArgs {
	return &SetMaxSizeArgs{}
}

func (p *SetMaxSizeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetMaxSizeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Size = U64(v)
	}
	return nil
}

func (p *SetMaxSizeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_max_size_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetMaxSizeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:size: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Size)); err != nil {
		return fmt.Errorf("%T.size (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:size: %s", p, err)
	}
	return err
}

func (p *SetMaxSizeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetMaxSizeArgs(%+v)", *p)
}

type SetMaxSizeResult struct {
	Ouch *InvalidParam `thrift:"ouch,1"`
}

func NewSetMaxSizeResult() *SetMaxSizeResult {
	return &SetMaxSizeResult{}
}

func (p *SetMaxSizeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetMaxSizeResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch = NewInvalidParam()
	if err := p.Ouch.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ouch)
	}
	return nil
}

func (p *SetMaxSizeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_max_size_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ouch != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetMaxSizeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ouch != nil {
		if err := oprot.WriteFieldBegin("ouch", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ouch: %s", p, err)
		}
		if err := p.Ouch.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ouch)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ouch: %s", p, err)
		}
	}
	return err
}

func (p *SetMaxSizeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetMaxSizeResult(%+v)", *p)
}

type SetLogFullActionArgs struct {
	Action LogFullAction `thrift:"action,1"`
}

func NewSetLogFullActionArgs() *SetLogFullActionArgs {
	return &SetLogFullActionArgs{
		Action: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *SetLogFullActionArgs) IsSetAction() bool {
	return int64(p.Action) != math.MinInt32-1
}

func (p *SetLogFullActionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetLogFullActionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Action = LogFullAction(v)
	}
	return nil
}

func (p *SetLogFullActionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_log_full_action_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetLogFullActionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAction() {
		if err := oprot.WriteFieldBegin("action", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:action: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Action)); err != nil {
			return fmt.Errorf("%T.action (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:action: %s", p, err)
		}
	}
	return err
}

func (p *SetLogFullActionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetLogFullActionArgs(%+v)", *p)
}

type SetLogFullActionResult struct {
}

func NewSetLogFullActionResult() *SetLogFullActionResult {
	return &SetLogFullActionResult{}
}

func (p *SetLogFullActionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetLogFullActionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_log_full_action_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetLogFullActionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetLogFullActionResult(%+v)", *p)
}

type SetAdministrativeStateArgs struct {
	State AdministrativeState `thrift:"state,1"`
}

func NewSetAdministrativeStateArgs() *SetAdministrativeStateArgs {
	return &SetAdministrativeStateArgs{
		State: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *SetAdministrativeStateArgs) IsSetState() bool {
	return int64(p.State) != math.MinInt32-1
}

func (p *SetAdministrativeStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetAdministrativeStateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.State = AdministrativeState(v)
	}
	return nil
}

func (p *SetAdministrativeStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_administrative_state_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetAdministrativeStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetState() {
		if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:state: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.State)); err != nil {
			return fmt.Errorf("%T.state (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:state: %s", p, err)
		}
	}
	return err
}

func (p *SetAdministrativeStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetAdministrativeStateArgs(%+v)", *p)
}

type SetAdministrativeStateResult struct {
}

func NewSetAdministrativeStateResult() *SetAdministrativeStateResult {
	return &SetAdministrativeStateResult{}
}

func (p *SetAdministrativeStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetAdministrativeStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("set_administrative_state_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetAdministrativeStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetAdministrativeStateResult(%+v)", *p)
}

type ClearLogArgs struct {
}

func NewClearLogArgs() *ClearLogArgs {
	return &ClearLogArgs{}
}

func (p *ClearLogArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClearLogArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clear_log_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ClearLogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearLogArgs(%+v)", *p)
}

type ClearLogResult struct {
}

func NewClearLogResult() *ClearLogResult {
	return &ClearLogResult{}
}

func (p *ClearLogResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClearLogResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clear_log_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ClearLogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearLogResult(%+v)", *p)
}

type DestroyArgs struct {
}

func NewDestroyArgs() *DestroyArgs {
	return &DestroyArgs{}
}

func (p *DestroyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DestroyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("destroy_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DestroyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DestroyArgs(%+v)", *p)
}

type DestroyResult struct {
}

func NewDestroyResult() *DestroyResult {
	return &DestroyResult{}
}

func (p *DestroyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DestroyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("destroy_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DestroyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DestroyResult(%+v)", *p)
}
