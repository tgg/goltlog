// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc_thrift

import (
	"fmt"
	"git-wip-us.apache.org/repos/asf/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

type LogProducer interface {
	LogConsumer

	// Parameters:
	//  - Records
	WriteRecords(records ProducerLogRecordSequence) (err error)
	// Parameters:
	//  - Record
	WriteRecord(record *ProducerLogRecord) (err error)
}

type LogProducerClient struct {
	*LogConsumerClient
}

func NewLogProducerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LogProducerClient {
	return &LogProducerClient{LogConsumerClient: NewLogConsumerClientFactory(t, f)}
}

func NewLogProducerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LogProducerClient {
	return &LogProducerClient{LogConsumerClient: NewLogConsumerClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Records
func (p *LogProducerClient) WriteRecords(records ProducerLogRecordSequence) (err error) {
	if err = p.sendWriteRecords(records); err != nil {
		return
	}
	return
}

func (p *LogProducerClient) sendWriteRecords(records ProducerLogRecordSequence) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("write_records", thrift.CALL, p.SeqId)
	args110 := NewWriteRecordsArgs()
	args110.Records = records
	err = args110.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *LogProducerClient) recvWriteRecords() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result111 := NewWriteRecordsResult()
	err = result111.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Record
func (p *LogProducerClient) WriteRecord(record *ProducerLogRecord) (err error) {
	if err = p.sendWriteRecord(record); err != nil {
		return
	}
	return
}

func (p *LogProducerClient) sendWriteRecord(record *ProducerLogRecord) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("write_record", thrift.CALL, p.SeqId)
	args114 := NewWriteRecordArgs()
	args114.Record = record
	err = args114.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *LogProducerClient) recvWriteRecord() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result115 := NewWriteRecordResult()
	err = result115.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

type LogProducerProcessor struct {
	*LogConsumerProcessor
}

func NewLogProducerProcessor(handler LogProducer) *LogProducerProcessor {
	self118 := &LogProducerProcessor{NewLogConsumerProcessor(handler)}
	self118.AddToProcessorMap("write_records", &logProducerProcessorWriteRecords{handler: handler})
	self118.AddToProcessorMap("write_record", &logProducerProcessorWriteRecord{handler: handler})
	return self118
}

type logProducerProcessorWriteRecords struct {
	handler LogProducer
}

func (p *logProducerProcessorWriteRecords) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewWriteRecordsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("write_records", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewWriteRecordsResult()
	if err = p.handler.WriteRecords(args.Records); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing write_records: "+err.Error())
		oprot.WriteMessageBegin("write_records", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("write_records", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type logProducerProcessorWriteRecord struct {
	handler LogProducer
}

func (p *logProducerProcessorWriteRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewWriteRecordArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("write_record", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewWriteRecordResult()
	if err = p.handler.WriteRecord(args.Record); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing write_record: "+err.Error())
		oprot.WriteMessageBegin("write_record", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("write_record", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type WriteRecordsArgs struct {
	Records ProducerLogRecordSequence `thrift:"records,1"`
}

func NewWriteRecordsArgs() *WriteRecordsArgs {
	return &WriteRecordsArgs{}
}

func (p *WriteRecordsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *WriteRecordsArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Records = make([]*ProducerLogRecord, 0, size)
	for i := 0; i < size; i++ {
		_elem119 := NewProducerLogRecord()
		if err := _elem119.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem119)
		}
		p.Records = append(p.Records, _elem119)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *WriteRecordsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("write_records_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *WriteRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Records != nil {
		if err := oprot.WriteFieldBegin("records", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:records: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Records)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Records {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:records: %s", p, err)
		}
	}
	return err
}

func (p *WriteRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WriteRecordsArgs(%+v)", *p)
}

type WriteRecordsResult struct {
}

func NewWriteRecordsResult() *WriteRecordsResult {
	return &WriteRecordsResult{}
}

func (p *WriteRecordsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *WriteRecordsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("write_records_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *WriteRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WriteRecordsResult(%+v)", *p)
}

type WriteRecordArgs struct {
	Record *ProducerLogRecord `thrift:"record,1"`
}

func NewWriteRecordArgs() *WriteRecordArgs {
	return &WriteRecordArgs{}
}

func (p *WriteRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *WriteRecordArgs) readField1(iprot thrift.TProtocol) error {
	p.Record = NewProducerLogRecord()
	if err := p.Record.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Record)
	}
	return nil
}

func (p *WriteRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("write_record_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *WriteRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Record != nil {
		if err := oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:record: %s", p, err)
		}
		if err := p.Record.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Record)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:record: %s", p, err)
		}
	}
	return err
}

func (p *WriteRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WriteRecordArgs(%+v)", *p)
}

type WriteRecordResult struct {
}

func NewWriteRecordResult() *WriteRecordResult {
	return &WriteRecordResult{}
}

func (p *WriteRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *WriteRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("write_record_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *WriteRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WriteRecordResult(%+v)", *p)
}
